import os
import logging
import random
import asyncio
from Script import script
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id
from database.users_chats_db import db
from info import CHANNELS, ADMINS, ADMIN, AUTH_CHANNEL, LOG_CHANNEL, PICS, BATCH_FILE_CAPTION, CUSTOM_FILE_CAPTION, PROTECT_CONTENT
from utils import get_settings, get_size, is_subscribed, save_group_settings, temp
from database.connections_mdb import active_connection
import re
import json
import base64
logger = logging.getLogger(__name__)

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [
            [
                InlineKeyboardButton(' Ä·¥áq·¥ú·¥áÍú±·¥õ …¢ Ä·¥è·¥ú·¥©', url='https://t.me/CinimaBranthen')
            ],
            [
                InlineKeyboardButton('#Pattisho:WTF || C0B', url=f"https://t.me/COBLINKS "),
            ]
            ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.START_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup)
        await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
            InlineKeyboardButton('·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á Íú∞·¥è Ä ·¥ç·¥è Ä·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s', callback_data='help')
           ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    if AUTH_CHANNEL and not await is_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL))
        except ChatAdminRequired:
            logger.error("Make sure Bot is admin in Forcesub channel")
            return
        if message.command[1] != "subscribe":
            try:
                kk, file_id = message.command[1].split("_", 1)
                pre = 'checksubp' if kk == 'filep' else 'checksub' 
                btn = [[InlineKeyboardButton("·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥ò", url=invite_link.invite_link),
                        InlineKeyboardButton("·¥ç·¥á ·¥ä·¥è…™…¥·¥á·¥Ö", callback_data=f"{pre}#{file_id}")],[
                        InlineKeyboardButton("H·¥á è B·¥è·¥õ....! W ú è I'·¥ç ·¥ä·¥è…™…¥…™…¥…¢", callback_data="neosub")]]
            except (IndexError, ValueError):
                btn = [[InlineKeyboardButton("·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥ò", url=invite_link.invite_link),
                        InlineKeyboardButton("·¥ç·¥á ·¥ä·¥è…™…¥·¥á·¥Ö", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")],[
                        InlineKeyboardButton("H·¥á è B·¥è·¥õ....! W ú è I'·¥ç ·¥ä·¥è…™…¥…™…¥…¢", callback_data="neosub")]]
        await client.send_message(
            chat_id=message.from_user.id,
            text="<b>‚ö†Ô∏è ·¥ò ü·¥á·¥Äs·¥á “ì·¥è ü ü·¥è·¥° ·¥õ ú…™s  Ä·¥ú ü·¥ás ‚ö†Ô∏è</b>\n\n<b>{} ‡¥Ü‡¥¶‡µç‡¥Ø‡¥Ç„Äê <a href=https://t.me/CblinkzZ>·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥ò</a> „Äë‡¥é‡¥®‡µç‡¥® ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÅ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡¥ø‡µΩ ‡¥ú‡µã‡¥Ø‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç.. ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ ‡¥¨‡µã‡¥ü‡µç‡¥ü‡¥ø‡µΩ ‡¥µ‡¥®‡µç‡¥®‡¥ø‡¥ü‡µç‡¥ü‡µç„Äê <a href=https://t.me/GxHeisenBot>·¥ç·¥á ·¥ä·¥è…™…¥·¥á·¥Ö</a> „Äë‡¥é‡¥®‡µç‡¥® ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥æ‡µΩ ‡¥´‡¥Ø‡µΩ ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥æ‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç</b>\n\n<b>F…™ Äs·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á„Äê <a href=https://t.me/CblinkzZ>·¥ä·¥è…™…¥ …¢ Ä·¥è·¥ú·¥ò</a> „Äë ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ä…¥·¥Ö ·¥ä·¥è…™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò. ·¥õ ú·¥á…¥ ·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥„Äê <a href=https://t.me/GxHeisenBot>·¥ç·¥á ·¥ä·¥è…™…¥·¥á·¥Ö</a> „Äë ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á “ì…™ ü·¥á...</b>".format(message.from_user.mention),
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.HTML,
            disable_web_page_preview=True
            )
        return
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
            InlineKeyboardButton('·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á Íú∞·¥è Ä ·¥ç·¥è Ä·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s', callback_data='help')
           ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    data = message.command[1]
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""
    
    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
                )
            filetype = msg.media
            file = getattr(msg, filetype)
            title = file.file_name
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            return
        except:
            pass
        return await message.reply('No such file exist.')
    files = files_[0]
    title = files.file_name
    size=get_size(files.file_size)
    f_caption=files.caption
    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption=f_caption
    if f_caption is None:
        f_caption = f"{files.file_name}"
    buttons = [
                    [
                        InlineKeyboardButton('üö∏ ·¥Ö·¥á ü·¥á·¥õ·¥á', callback_data="close_pages"),
                        InlineKeyboardButton('üíû s ú·¥Ä Ä·¥á', url="https://t.me/share/url?url=**üò±%20‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ%20‡¥≠‡µç‡¥∞‡¥æ‡¥®‡µç‡¥§‡µª.¬≤¬∑‚Å∞%20üò±%0A%0A‡¥è‡¥§‡µç%20‡¥Ö‡µº‡¥ß‡¥∞‡¥æ‡¥§‡µç‡¥∞‡¥ø%20‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö‡¥æ‡¥≤‡µÅ‡¥Ç%20‡¥™‡¥ü‡¥Ç%20‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç,%20‡¥≤‡µã‡¥ï‡¥§‡µç‡¥§‡¥ø‡¥≤‡µÜ%20‡¥í‡¥ü‡µç‡¥ü‡µÅ‡¥Æ‡¥ø‡¥ï‡µç‡¥ï%20‡¥≠‡¥æ‡¥∑‡¥ï‡¥≥‡¥ø‡¥≤‡µÅ‡¥Æ‡µÅ‡¥≥‡µç‡¥≥%20‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥ï‡¥≥‡µÅ‡¥ü‡µÜ%20‡¥ï‡¥≥‡¥ï‡µç‡¥∑‡µª..%20‚ù§Ô∏è%0A%0Aüëá%20GROUP%20LINK%20üëá%0A@CinimaBranthen%0A@CinimaBranthen%0A@CinimaBranthen**")
                    ],
                    [
                        InlineKeyboardButton(text=f'üåø F…™ ü·¥á s…™·¥¢·¥á „Äê {size} „Äëüåø', callback_data='gxneo')
                    ]
                    ]
    await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        reply_markup=InlineKeyboardMarkup(buttons),
        protect_content=True if pre == 'filep' else False
        )
                    

@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("Unexpected type of CHANNELS")

    text = 'üìë **Indexed channels/groups**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**Total:** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('TelegramBot.log')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('total') & filters.user(ADMINS))
async def total(bot, message):
    """Show total files in database"""
    msg = await message.reply("Processing...‚è≥", quote=True)
    try:
        total = await Media.count_documents()
        await msg.edit(f'üìÅ Saved files: {total}')
    except Exception as e:
        logger.exception('Failed to check total files')
        await msg.edit(f'Error: {e}')
        
@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('GTBERG.log')
    except Exception as e:
        await message.reply(str(e))
        
@Client.on_message(filters.command('submit') & filters.private)
async def report(bot, message):
        if message.reply_to_message:
                                  await bot.send_message(chat_id=ADMIN, text=f"<b>‚≠ïÔ∏èNEW MESSAGE‚≠ïÔ∏è\n \nüßø Name: {message.from_user.mention}\nüßø User ID:</b> <code>{message.chat.id}</code>")
                                  await bot.forward_messages(chat_id=ADMIN, from_chat_id=message.from_user.id, message_ids=message.reply_to_message.message_id)
                                  await message.reply_text("<b>‚úÖ Your Feedback Successfully Submitted to the Admins</b>")
        else:
             await message.reply_text("<b>Use this command as the reply of any Message to Report</b>")

@Client.on_message(filters.command('reply') & filters.private)
async def replyt(bot, message):
    if message.from_user.id == ADMIN: 
               if message.reply_to_message:
                                    userid=int(message.text.replace("/reply"," "))
                                    await bot.send_message(chat_id=userid, text=f"<b>An Admin is responded to your feedback ‚ú®</b>")
                                    await bot.copy_message(chat_id=userid, from_chat_id=ADMIN, message_id=message.reply_to_message.message_id)
                                    await message.reply_text("<b>‚úÖ Your Reply Successfully Send to the User</b>")
               else:
                    await message.reply_text("<b>Use this command as the reply of any Message to Reply</b>")                         
    else:
         await message.reply_text("<b>That's not for you bruh üòÖ</b>")

@Client.on_message(filters.command('send') & filters.private)
async def send(bot, message):
    if message.from_user.id == ADMIN: 
               if message.reply_to_message:
                                    chatid=int(message.text.replace("/send"," "))
                                    await bot.copy_message(chat_id=chatid, from_chat_id=ADMIN, message_id=message.reply_to_message.message_id)
                                    await message.reply_text("<b>‚úÖ Message Successfully Send to the Group</b>")
               else:
                    await message.reply_text("<b>Use this command as the reply of any Message to Send in Group</b>")                         
    else:
         await message.reply_text("<b>That's not for you bruh üòÖ</b>")

@Client.on_message(filters.command('pin') & filters.private)
async def pin(bot, message):
    if message.from_user.id == ADMIN: 
               if message.reply_to_message:
                                    chatid=int(message.text.replace("/pin"," "))
                                    p=await bot.copy_message(chat_id=chatid, from_chat_id=ADMIN, message_id=message.reply_to_message.message_id)
                                    await p.pin()
                                    await message.reply_text("<b>‚úÖ Message Successfully Send to the Group And pinned</b>")
               else:
                    await message.reply_text("<b>Use this command as the reply of any Message to Send in Group</b>")                         
    else:
         await message.reply_text("<b>That's not for you bruh üòÖ</b>")
         
@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete(bot, message):
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("Processing...‚è≥", quote=True)
    else:
        await message.reply('Reply to file with /delete which you want to delete', quote=True)
        return

    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('This is not supported file format')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)

    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('File is successfully deleted from database')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('File is successfully deleted from database')
        else:
            # files indexed before https://github.com/EvamariaTG/EvaMaria/commit/f3d2a1bcb155faf44178e5d7a685a1b533e714bf#diff-86b613edf1748372103e94cacff3b578b36b698ef9c16817bb98fe9ef22fb669R39 
            # have original file name.
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('File is successfully deleted from database')
            else:
                await msg.edit('File not found in database')


@Client.on_message(filters.command('deleteall') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    await message.reply_text(
        'This will delete all indexed files.\nDo you want to continue??',
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="YES", callback_data="autofilter_delete"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="CANCEL", callback_data="close_data"
                    )
                ],
            ]
        ),
        quote=True,
    )


@Client.on_callback_query(filters.regex(r'^autofilter_delete'))
async def delete_all_index_confirm(bot, message):
    await Media.collection.drop()
    await message.answer('Piracy Is Crime')
    await message.message.edit('Succesfully Deleted All The Indexed Files.')

